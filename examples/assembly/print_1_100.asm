#MACRO
#CODE
JMP @MAIN
; NUM TO STR FUNC
@NUM_TO_STR
MOV R2 R13
SUB R2 24
MOV R0 &R2 ; THE BUFFER
ADD R2 8
MOV R3 &R2 ; THE NUMBER
MOV R5 R0
XOR R1 R1
@WHILE.1.CONDITION
MOV R8 R3
JLE @WHILE.1.END
JMP @WHILE.1.BODY
@WHILE.1.BODY
; EXTRACT THE DIGIT
DIV R3 10
ADD R8 48
MOV R8LT R8
MOV &R0 R8LT
INC R0
JMP @WHILE.1.CONDITION
@WHILE.1.END
XOR R1 R1
MOV &R0 R1LT
DEC R0
; REVERSE THE NUMBER
@WHILE.2.CONDITION
MOV R1 R0
SUB R1 R5
JLE @WHILE.2.END
JMP @WHILE.2.BODY
@WHILE.2.BODY
MOV R1LT &R0
MOV R1UT &R5
MOV &R0 R1UT
MOV &R5 R1LT
DEC R0
INC R5
JMP @WHILE.2.CONDITION
@WHILE.2.END
POP R0 ; GET RETURN ADDRESS
JMP R0
@MAIN
@FOR.1.INITIALIZATION
XOR R0 R0
PUSH R0 
@FOR.1.CONDITION
MOV R0 R13
SUB R0 8
MOV R0 &R0
SUB R0 100
JGT @FOR.1.END
JMP @FOR.1.BODY
@FOR.1.UPDATION
MOV R0 R13
SUB R0 8
MOV R1 &R0
INC R1
MOV &R0 R1
JMP @FOR.1.CONDITION
@FOR.1.BODY
MOV R1 R13
SUB R1 8
MOV R1 &R1
MOV R0 R13
ADD R13 256
PUSH R0
PUSH R1
; PUSH RETURN ADDRESS TO STACK AND CALL FUNCTION
MOV R0 R15
ADD R0 44
PUSH R0
JMP @NUM_TO_STR
; POP OF FUNCTION PARAMS FROM STACK AFER FUNCTION CALL
POP R1
POP R0
SUB R13 256
; PRINT THE NUMBER FROM BUFFER (R13)
MOV R0 0
MOV R1 0 
MOV R2 R13
MOV R3 256
SYSCALL
; PRINT THE NEWLINE (ASCII 10)
; HERE 10 IS ASCII FOR '\n'
MOV R0LT 10
MOV &R13 R0LT
MOV R0 0
MOV R1 0 
MOV R2 R13
MOV R3 1
SYSCALL
JMP @FOR.1.UPDATION
@FOR.1.END
POP R0
EXT
#DATA
